{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/bignumber.js/bignumber.js","quantifier.min.js","source/Quantifier-Browser-Shim.js","source/Quantifier-DefaultSettings.js","source/Quantifier.js"],"names":["f","exports","module","define","amd","window","global","self","this","Quantifier","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","s","z","j","charCodeAt","slice","compare","x","y","b","xc","yc","k","l","intCheck","min","max","name","String","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","method","m","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","libNPMModuleWrapper","Hash","Title","Description","Minimum","Maximum","FixedRange","MathMode","ArbitraryPrecision","RoundingMethod","DecimalPlaces","Standard","Rounding","libQuantifierDefaultSettings","libBigNumber","pSettings","settings","bins","statistics","SetMinimum","SetMaximum","Size","Entries","ProcessedBins","SetTotal","PushOperations","PushOperationsAtStatisticsGeneration","BinMinimum","BinMaximum","addBin","pBin","pBinAmount","addBinArbitraryPrecisionMath","addBinNativeMath","updateBinStatistics","tmpBin","parseInt","tmpBinAmount","generateStatistics","undefined","greatestCommonFactor","pDivisor","pDivisee","quantize","pSetSize","tmpNewHistogram","tmpSetMultiplier","quantizeLargestPossibleEvenSet","pSetMaxSize","tmpFactoredSize"],"mappings":"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","file":"quantifier.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Quantifier = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n;(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n\n},{}],2:[function(require,module,exports){\n/**\n* Simple browser shim loader - assign the npm module to a window global automatically\n*\n* @license MIT\n* @author <steven@velozo.com>\n*/\nvar libNPMModuleWrapper = require('./Quantifier.js');\n\nif ((typeof(window) === 'object') && !window.hasOwnProperty('Quantifier'))\n{\n\twindow.Quantifier = libNPMModuleWrapper;\n}\n\nmodule.exports = libNPMModuleWrapper;\n},{\"./Quantifier.js\":4}],3:[function(require,module,exports){\n/**\n* @license MIT\n* @author <steven@velozo.com>\n*/\n\n/**\n* Quantifier Default Settings Object\n*/\nmodule.exports = (\n\t{\n\t\t// The hash for the histogram (useful for DOM referencing and such)\n\t\tHash: 'Histogram',\n\n\t\tTitle: 'Default Histogram Title',\n\t\tDescription: false,\n\n\t\t// The minimum and maximum values\n\t\tMinimum: false,\n\t\tMaximum: false,\n\n\t\t// If this is set true, the rendering and quantization algorithms will\n\t\t//   ignore values outside the fixed minimum and maximum values set here\n\t\tFixedRange: false,\n\n\t\tMathMode:\n\t\t\t{\n\t\t\t\t// If this is set to true, use the slower arbitrary-precision library for math operations.\n\t\t\t\tArbitraryPrecision: false,\n\n\t\t\t\t// Configure the arbitrary configuration library\n\t\t\t\tBigNumber:\n\t\t\t\t\t{\n\t\t\t\t\t\t// Bignumber allows any of:\n\t\t\t\t\t\t// \t\tROUND_UP\t0\tRounds away from zero\n\t\t\t\t\t\t// \t\tROUND_DOWN\t1\tRounds towards zero\n\t\t\t\t\t\t// \t\tROUND_CEIL\t2\tRounds towards Infinity\n\t\t\t\t\t\t// \t\tROUND_FLOOR\t3\tRounds towards -Infinity\n\t\t\t\t\t\t// \t\tROUND_HALF_UP\t4\tRounds towards nearest neighbour.  -- If equidistant, rounds away from zero\n\t\t\t\t\t\t// \t\tROUND_HALF_DOWN\t5\tRounds towards nearest neighbour. -- If equidistant, rounds towards zero\n\t\t\t\t\t\t// \t\tROUND_HALF_EVEN\t6\tRounds towards nearest neighbour. -- If equidistant, rounds towards even neighbour\n\t\t\t\t\t\t// \t\tROUND_HALF_CEIL\t7\tRounds towards nearest neighbour. -- If equidistant, rounds towards Infinity\n\t\t\t\t\t\t// \t\tROUND_HALF_FLOOR\t8\tRounds towards nearest neighbour. --If equidistant, rounds towards -Infinity\n\t\t\t\t\t\tRoundingMethod: 4,\n\t\t\t\t\t\tDecimalPlaces: 10\n\t\t\t\t\t},\n\n\t\t\t\tStandard:\n\t\t\t\t\t{\n\t\t\t\t\t\t// If this is set to true, we bin values using Math.round\n\t\t\t\t\t\tRounding: false\n\t\t\t\t\t}\n\t\t\t}\n\t});\n},{}],4:[function(require,module,exports){\nconst libQuantifierDefaultSettings = require('./Quantifier-DefaultSettings.js');\nconst libBigNumber = require('bignumber.js');\n\nclass Quantifier\n{\n\tconstructor(pSettings)\n\t{\n\t\tthis.settings = {...{}, ...pSettings, ...libQuantifierDefaultSettings};\n\n\t\tthis.bins = [];\n\n\t\tthis.statistics = (\n\t\t\t{\n\t\t\t\t// The actual minimum and maximum for the set of bins\n\t\t\t\tSetMinimum: false,\n\t\t\t\tSetMaximum: false,\n\n\t\t\t\t// The defined minimum and maximum for the set of bins\n\t\t\t\tMinimum: false,\n\t\t\t\tMaximum: false,\n\t\t\t\t// The size (length) of the set\n\t\t\t\tSize: false,\n\n\t\t\t\t// The total number of bins that have been touched (note that bins with value 0 are counted but null are not)\n\t\t\t\tEntries: false,\n\n\t\t\t\tProcessedBins: [],\n\n\t\t\t\t// The sum of all bins values\n\t\t\t\tSetTotal: false,\n\n\t\t\t\t// The total number of push operations which have been made to the set\n\t\t\t\tPushOperations: 0,\n\t\t\t\t// The number of push operations when the statistics were last generated (for cache validation)\n\t\t\t\tPushOperationsAtStatisticsGeneration: -1,\n\n\t\t\t\t// The smallest and largest bin values. (note that null is not counted as 0)\n\t\t\t\tBinMinimum: false,\n\t\t\t\tBinMaximum: false\n\t\t\t});\n\t}\n\n\taddBin(pBin, pBinAmount)\n\t{\n\t\tif (!this.settings.MathMode.ArbitraryPrecision)\n\t\t{\n\t\t\tthis.addBinNativeMath(pBin, pBinAmount);;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Configure libBigNumber with the number of decimal places and rounding mode\n\t\t\t// ERRORS is set to surpress the double int 15 significant digits issues\n\t\t\t//libBigNumber.config({ ERRORS: false, DECIMAL_PLACES: this.settings.MathMode.BigNumber.DecimalPlaces, ROUNDING_MODE: this.settings.MathMode.BigNumber.RoundingMethod });\n\t\t\tthis.addBinArbitraryPrecisionMath(pBin, pBinAmount);\n\t\t}\n\t}\n\n\tupdateBinStatistics(pBin)\n\t{\n\t\tthis.statistics.PushOperations++;\n\n\t\tif (!this.statistics.SetMinimum || (pBin < this.statistics.SetMinimum))\n\t\t{\n\t\t\tthis.statistics.SetMinimum = pBin;\n\t\t}\n\t\tif (!this.statistics.SetMaximum || (pBin > this.statistics.SetMaximum))\n\t\t{\n\t\t\tthis.statistics.SetMaximum = pBin;\n\t\t}\n\t}\n\n\taddBinNativeMath(pBin, pBinAmount)\n\t{\n\t\tlet tmpBin = false;\n\n\t\t// Branch on rounding method\n\t\tif (!this.settings.MathMode.Standard.Rounding)\n\t\t{\n\t\t\t// Don't round at all.  Naively parse the int\n\t\t\ttmpBin = parseInt(pBin, 10);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use Math.round\n\t\t\ttmpBin = Math.round(pBin, 10);\n\t\t}\n\n\t\t// Get the bin amount\n\t\t// This defaults to 1 if you pass in something that isn't parsable as a number\n\t\tlet tmpBinAmount = (typeof(pBinAmount) === 'number') ? pBinAmount : 1;\n\n\t\t// Initialize the bin\n\t\tif (this.bins[tmpBin] == null)\n\t\t{\n\t\t\tthis.bins[tmpBin] = 0;\n\t\t}\n\n\t\tthis.updateBinStatistics(tmpBin);\n\n\t\tthis.bins[tmpBin] += tmpBinAmount;\n\n\t\treturn this;\n\t}\n\n\n\taddBinArbitraryPrecisionMath(pBin, pBinAmount)\n\t{\n\t\t// Bins are still integers, so round out the decimal places after loading\n\t\tlet tmpBin = new libBigNumber(pBin).decimalPlaces(0).toNumber();\n\n\t\t// Get the bin amount\n\t\tlet tmpBinAmount = (typeof(pBinAmount) === 'number') ? new libBigNumber(pBinAmount) : new libBigNumber(1);\n\n\t\t// Initialize the bin\n\t\tif (this.bins[tmpBin] == null)\n\t\t{\n\t\t\tthis.bins[tmpBin] = new libBigNumber(0);\n\t\t}\n\n\t\tthis.updateBinStatistics(tmpBin);\n\n\t\tthis.bins[tmpBin] = this.bins[tmpBin].plus(tmpBinAmount);\n\n\t\treturn this;\n\t}\n\n\tgenerateStatistics()\n\t{\n\t\tif (this.statistics.PushOperationsAtStatisticsGeneration >= this.statistics.PushOperations)\n\t\t{\n\t\t\t// The statistics cache is still valid, so keep using it.\n\t\t\treturn this;\n\t\t}\n\n\t\t// Set the cache to valid\n\t\tthis.statistics.PushOperationsAtStatisticsGeneration = this.statistics.PushOperations;\n\n\t\t// Reset some statistics\n\t\tthis.statistics.Size = 0;\n\t\tthis.statistics.SetTotal = 0;\n\t\tthis.statistics.Entries = 0;\n\t\tthis.statistics.ProcessedBins = [];\n\n\t\tif (this.settings.FixedRange)\n\t\t{\n\t\t\t// If the user set a fixed range for the histogram set scope, use that\n\t\t\tthis.statistics.Minimum = this.settings.Minimum;\n\t\t\tthis.statistics.Maximum = this.settings.Maximum;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Otherwise, use the dynamically captured data\n\t\t\tthis.statistics.Minimum = this.statistics.SetMinimum;\n\t\t\tthis.statistics.Maximum = this.statistics.SetMaximum;\n\t\t}\n\n\t\t// Walk the bins, updating stat values\n\t\tfor (var i = this.statistics.Minimum; i <= this.statistics.Maximum; i++)\n\t\t{\n\t\t\t// If this is out of scope, just put a 0 in.\n\t\t\tif ((this.bins[i] === undefined) || (this.bins[i] === null))\n\t\t\t{\n\t\t\t\tthis.statistics.ProcessedBins[i] = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Add this value to the processed bins\n\t\t\tif (this.settings.MathMode.ArbitraryPrecision)\n\t\t\t{\n\t\t\t\tthis.statistics.ProcessedBins[i] = this.bins[i].decimalPlaces(0).toNumber();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.statistics.ProcessedBins[i] = this.bins[i];\n\t\t\t}\n\n\t\t\t// Check the bin max/min\n\t\t\tif (!this.statistics.BinMinimum || (this.bins[i] < this.statistics.BinMinimum))\n\t\t\t{\n\t\t\t\tthis.statistics.BinMinimum = this.bins[i];\n\t\t\t}\n\t\t\tif (!this.statistics.BinMaximum || (this.bins[i] > this.statistics.BinMaximum))\n\t\t\t{\n\t\t\t\tthis.statistics.BinMaximum = this.bins[i];\n\t\t\t}\n\n\t\t\t// Add to the valid entry count\n\t\t\tthis.statistics.Entries++;\n\n\t\t\t// Sum the set total (not currently using arbitrary precision)\n\t\t\tthis.statistics.SetTotal += this.bins[i];\n\n\t\t\t// Compute the set size\n\t\t\tthis.statistics.Size = this.statistics.Maximum - this.statistics.Minimum + 1\n\t\t}\n\n\t\t// First, reset the statistics.\n\t\treturn this;\n\t}\n\n\tgreatestCommonFactor(pDivisor, pDivisee)\n\t{\n\t\tif (pDivisee)\n\t\t{\n\t\t\treturn greatestCommonFactor(pDivisee, pDivisor % pDivisee);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//console.log(' --> Greatest Common Factor: '+Math.abs(pDivisor));\n\t\t\treturn Math.abs(pDivisor);\n\t\t}\n\t}\n\n\tquantize(pSetSize)\n\t{\n\t\tgenerateStatistics();\n\n\t\t// If the sizes match, return this histogram.\n\t\tif (pSetSize === this.statistics.Size)\n\t\t{\n\t\t\treturn this;\n\t\t}\n\n\t\t// Create a histogram to stuff these values into\n\t\t// TODO: Should we pass the settings into here?\n\t\tvar tmpNewHistogram = new Quantifier();\n\n\t\tvar tmpSetMultiplier = pSetSize / this.statistics.Size;\n\n\t\tfor (var i = this.statistics.Minimum; i <= this.statistics.Maximum; i++)\n\t\t{\n\t\t\t// TODO: Allow arbitrary precision for quantization as well\n\t\t\ttmpNewHistogram.addBin(Math.decimalPlaces(i*tmpSetMultiplier), this.statistics.ProcessedBins[i])\n\t\t}\n\n\t\ttmpNewHistogram.generateStatistics();\n\n\t\treturn tmpNewHistogram;\n\t}\n\n\tquantizeLargestPossibleEvenSet(pSetMaxSize)\n\t{\n\t\tthis.generateStatistics();\n\n\t\t//console.log('Quantizing a set with size '+this.statistics.Size+' to match '+pSetMaxSize);\n\n\t\t// IF THE MAX SIZE IS SMALLER THAN THE SET SIZE ... Take the current set size, and quantize it down to the greatest common factor with the current set.\n\t\tlet tmpFactoredSize = this.greatestCommonFactor(pSetMaxSize, this.statistics.Size);\n\n\t\t//console.log('--> Factored to: '+tmpFactoredSize);\n\n\t\t// Now requantize the set into that size.\n\t\treturn this.quantize(tmpFactoredSize);\n\t}\n}\n\nmodule.exports = Quantifier;\n},{\"./Quantifier-DefaultSettings.js\":3,\"bignumber.js\":1}]},{},[2])(2)\n});\n\n","/**\n* Simple browser shim loader - assign the npm module to a window global automatically\n*\n* @license MIT\n* @author <steven@velozo.com>\n*/\nvar libNPMModuleWrapper = require('./Quantifier.js');\n\nif ((typeof(window) === 'object') && !window.hasOwnProperty('Quantifier'))\n{\n\twindow.Quantifier = libNPMModuleWrapper;\n}\n\nmodule.exports = libNPMModuleWrapper;","/**\n* @license MIT\n* @author <steven@velozo.com>\n*/\n\n/**\n* Quantifier Default Settings Object\n*/\nmodule.exports = (\n\t{\n\t\t// The hash for the histogram (useful for DOM referencing and such)\n\t\tHash: 'Histogram',\n\n\t\tTitle: 'Default Histogram Title',\n\t\tDescription: false,\n\n\t\t// The minimum and maximum values\n\t\tMinimum: false,\n\t\tMaximum: false,\n\n\t\t// If this is set true, the rendering and quantization algorithms will\n\t\t//   ignore values outside the fixed minimum and maximum values set here\n\t\tFixedRange: false,\n\n\t\tMathMode:\n\t\t\t{\n\t\t\t\t// If this is set to true, use the slower arbitrary-precision library for math operations.\n\t\t\t\tArbitraryPrecision: false,\n\n\t\t\t\t// Configure the arbitrary configuration library\n\t\t\t\tBigNumber:\n\t\t\t\t\t{\n\t\t\t\t\t\t// Bignumber allows any of:\n\t\t\t\t\t\t// \t\tROUND_UP\t0\tRounds away from zero\n\t\t\t\t\t\t// \t\tROUND_DOWN\t1\tRounds towards zero\n\t\t\t\t\t\t// \t\tROUND_CEIL\t2\tRounds towards Infinity\n\t\t\t\t\t\t// \t\tROUND_FLOOR\t3\tRounds towards -Infinity\n\t\t\t\t\t\t// \t\tROUND_HALF_UP\t4\tRounds towards nearest neighbour.  -- If equidistant, rounds away from zero\n\t\t\t\t\t\t// \t\tROUND_HALF_DOWN\t5\tRounds towards nearest neighbour. -- If equidistant, rounds towards zero\n\t\t\t\t\t\t// \t\tROUND_HALF_EVEN\t6\tRounds towards nearest neighbour. -- If equidistant, rounds towards even neighbour\n\t\t\t\t\t\t// \t\tROUND_HALF_CEIL\t7\tRounds towards nearest neighbour. -- If equidistant, rounds towards Infinity\n\t\t\t\t\t\t// \t\tROUND_HALF_FLOOR\t8\tRounds towards nearest neighbour. --If equidistant, rounds towards -Infinity\n\t\t\t\t\t\tRoundingMethod: 4,\n\t\t\t\t\t\tDecimalPlaces: 10\n\t\t\t\t\t},\n\n\t\t\t\tStandard:\n\t\t\t\t\t{\n\t\t\t\t\t\t// If this is set to true, we bin values using Math.round\n\t\t\t\t\t\tRounding: false\n\t\t\t\t\t}\n\t\t\t}\n\t});","const libQuantifierDefaultSettings = require('./Quantifier-DefaultSettings.js');\nconst libBigNumber = require('bignumber.js');\n\nclass Quantifier\n{\n\tconstructor(pSettings)\n\t{\n\t\tthis.settings = {...{}, ...pSettings, ...libQuantifierDefaultSettings};\n\n\t\tthis.bins = [];\n\n\t\tthis.statistics = (\n\t\t\t{\n\t\t\t\t// The actual minimum and maximum for the set of bins\n\t\t\t\tSetMinimum: false,\n\t\t\t\tSetMaximum: false,\n\n\t\t\t\t// The defined minimum and maximum for the set of bins\n\t\t\t\tMinimum: false,\n\t\t\t\tMaximum: false,\n\t\t\t\t// The size (length) of the set\n\t\t\t\tSize: false,\n\n\t\t\t\t// The total number of bins that have been touched (note that bins with value 0 are counted but null are not)\n\t\t\t\tEntries: false,\n\n\t\t\t\tProcessedBins: [],\n\n\t\t\t\t// The sum of all bins values\n\t\t\t\tSetTotal: false,\n\n\t\t\t\t// The total number of push operations which have been made to the set\n\t\t\t\tPushOperations: 0,\n\t\t\t\t// The number of push operations when the statistics were last generated (for cache validation)\n\t\t\t\tPushOperationsAtStatisticsGeneration: -1,\n\n\t\t\t\t// The smallest and largest bin values. (note that null is not counted as 0)\n\t\t\t\tBinMinimum: false,\n\t\t\t\tBinMaximum: false\n\t\t\t});\n\t}\n\n\taddBin(pBin, pBinAmount)\n\t{\n\t\tif (!this.settings.MathMode.ArbitraryPrecision)\n\t\t{\n\t\t\tthis.addBinNativeMath(pBin, pBinAmount);;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Configure libBigNumber with the number of decimal places and rounding mode\n\t\t\t// ERRORS is set to surpress the double int 15 significant digits issues\n\t\t\t//libBigNumber.config({ ERRORS: false, DECIMAL_PLACES: this.settings.MathMode.BigNumber.DecimalPlaces, ROUNDING_MODE: this.settings.MathMode.BigNumber.RoundingMethod });\n\t\t\tthis.addBinArbitraryPrecisionMath(pBin, pBinAmount);\n\t\t}\n\t}\n\n\tupdateBinStatistics(pBin)\n\t{\n\t\tthis.statistics.PushOperations++;\n\n\t\tif (!this.statistics.SetMinimum || (pBin < this.statistics.SetMinimum))\n\t\t{\n\t\t\tthis.statistics.SetMinimum = pBin;\n\t\t}\n\t\tif (!this.statistics.SetMaximum || (pBin > this.statistics.SetMaximum))\n\t\t{\n\t\t\tthis.statistics.SetMaximum = pBin;\n\t\t}\n\t}\n\n\taddBinNativeMath(pBin, pBinAmount)\n\t{\n\t\tlet tmpBin = false;\n\n\t\t// Branch on rounding method\n\t\tif (!this.settings.MathMode.Standard.Rounding)\n\t\t{\n\t\t\t// Don't round at all.  Naively parse the int\n\t\t\ttmpBin = parseInt(pBin, 10);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use Math.round\n\t\t\ttmpBin = Math.round(pBin, 10);\n\t\t}\n\n\t\t// Get the bin amount\n\t\t// This defaults to 1 if you pass in something that isn't parsable as a number\n\t\tlet tmpBinAmount = (typeof(pBinAmount) === 'number') ? pBinAmount : 1;\n\n\t\t// Initialize the bin\n\t\tif (this.bins[tmpBin] == null)\n\t\t{\n\t\t\tthis.bins[tmpBin] = 0;\n\t\t}\n\n\t\tthis.updateBinStatistics(tmpBin);\n\n\t\tthis.bins[tmpBin] += tmpBinAmount;\n\n\t\treturn this;\n\t}\n\n\n\taddBinArbitraryPrecisionMath(pBin, pBinAmount)\n\t{\n\t\t// Bins are still integers, so round out the decimal places after loading\n\t\tlet tmpBin = new libBigNumber(pBin).decimalPlaces(0).toNumber();\n\n\t\t// Get the bin amount\n\t\tlet tmpBinAmount = (typeof(pBinAmount) === 'number') ? new libBigNumber(pBinAmount) : new libBigNumber(1);\n\n\t\t// Initialize the bin\n\t\tif (this.bins[tmpBin] == null)\n\t\t{\n\t\t\tthis.bins[tmpBin] = new libBigNumber(0);\n\t\t}\n\n\t\tthis.updateBinStatistics(tmpBin);\n\n\t\tthis.bins[tmpBin] = this.bins[tmpBin].plus(tmpBinAmount);\n\n\t\treturn this;\n\t}\n\n\tgenerateStatistics()\n\t{\n\t\tif (this.statistics.PushOperationsAtStatisticsGeneration >= this.statistics.PushOperations)\n\t\t{\n\t\t\t// The statistics cache is still valid, so keep using it.\n\t\t\treturn this;\n\t\t}\n\n\t\t// Set the cache to valid\n\t\tthis.statistics.PushOperationsAtStatisticsGeneration = this.statistics.PushOperations;\n\n\t\t// Reset some statistics\n\t\tthis.statistics.Size = 0;\n\t\tthis.statistics.SetTotal = 0;\n\t\tthis.statistics.Entries = 0;\n\t\tthis.statistics.ProcessedBins = [];\n\n\t\tif (this.settings.FixedRange)\n\t\t{\n\t\t\t// If the user set a fixed range for the histogram set scope, use that\n\t\t\tthis.statistics.Minimum = this.settings.Minimum;\n\t\t\tthis.statistics.Maximum = this.settings.Maximum;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Otherwise, use the dynamically captured data\n\t\t\tthis.statistics.Minimum = this.statistics.SetMinimum;\n\t\t\tthis.statistics.Maximum = this.statistics.SetMaximum;\n\t\t}\n\n\t\t// Walk the bins, updating stat values\n\t\tfor (var i = this.statistics.Minimum; i <= this.statistics.Maximum; i++)\n\t\t{\n\t\t\t// If this is out of scope, just put a 0 in.\n\t\t\tif ((this.bins[i] === undefined) || (this.bins[i] === null))\n\t\t\t{\n\t\t\t\tthis.statistics.ProcessedBins[i] = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Add this value to the processed bins\n\t\t\tif (this.settings.MathMode.ArbitraryPrecision)\n\t\t\t{\n\t\t\t\tthis.statistics.ProcessedBins[i] = this.bins[i].decimalPlaces(0).toNumber();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.statistics.ProcessedBins[i] = this.bins[i];\n\t\t\t}\n\n\t\t\t// Check the bin max/min\n\t\t\tif (!this.statistics.BinMinimum || (this.bins[i] < this.statistics.BinMinimum))\n\t\t\t{\n\t\t\t\tthis.statistics.BinMinimum = this.bins[i];\n\t\t\t}\n\t\t\tif (!this.statistics.BinMaximum || (this.bins[i] > this.statistics.BinMaximum))\n\t\t\t{\n\t\t\t\tthis.statistics.BinMaximum = this.bins[i];\n\t\t\t}\n\n\t\t\t// Add to the valid entry count\n\t\t\tthis.statistics.Entries++;\n\n\t\t\t// Sum the set total (not currently using arbitrary precision)\n\t\t\tthis.statistics.SetTotal += this.bins[i];\n\n\t\t\t// Compute the set size\n\t\t\tthis.statistics.Size = this.statistics.Maximum - this.statistics.Minimum + 1\n\t\t}\n\n\t\t// First, reset the statistics.\n\t\treturn this;\n\t}\n\n\tgreatestCommonFactor(pDivisor, pDivisee)\n\t{\n\t\tif (pDivisee)\n\t\t{\n\t\t\treturn greatestCommonFactor(pDivisee, pDivisor % pDivisee);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//console.log(' --> Greatest Common Factor: '+Math.abs(pDivisor));\n\t\t\treturn Math.abs(pDivisor);\n\t\t}\n\t}\n\n\tquantize(pSetSize)\n\t{\n\t\tgenerateStatistics();\n\n\t\t// If the sizes match, return this histogram.\n\t\tif (pSetSize === this.statistics.Size)\n\t\t{\n\t\t\treturn this;\n\t\t}\n\n\t\t// Create a histogram to stuff these values into\n\t\t// TODO: Should we pass the settings into here?\n\t\tvar tmpNewHistogram = new Quantifier();\n\n\t\tvar tmpSetMultiplier = pSetSize / this.statistics.Size;\n\n\t\tfor (var i = this.statistics.Minimum; i <= this.statistics.Maximum; i++)\n\t\t{\n\t\t\t// TODO: Allow arbitrary precision for quantization as well\n\t\t\ttmpNewHistogram.addBin(Math.decimalPlaces(i*tmpSetMultiplier), this.statistics.ProcessedBins[i])\n\t\t}\n\n\t\ttmpNewHistogram.generateStatistics();\n\n\t\treturn tmpNewHistogram;\n\t}\n\n\tquantizeLargestPossibleEvenSet(pSetMaxSize)\n\t{\n\t\tthis.generateStatistics();\n\n\t\t//console.log('Quantizing a set with size '+this.statistics.Size+' to match '+pSetMaxSize);\n\n\t\t// IF THE MAX SIZE IS SMALLER THAN THE SET SIZE ... Take the current set size, and quantize it down to the greatest common factor with the current set.\n\t\tlet tmpFactoredSize = this.greatestCommonFactor(pSetMaxSize, this.statistics.Size);\n\n\t\t//console.log('--> Factored to: '+tmpFactoredSize);\n\n\t\t// Now requantize the set into that size.\n\t\treturn this.quantize(tmpFactoredSize);\n\t}\n}\n\nmodule.exports = Quantifier;"]}